\documentclass{beamer}

\usetheme{Madrid}

\usepackage[english]{babel}
\usepackage[utf8x]{inputenc}
\usepackage{csquotes}
% \usepackage[T1]{fontenc}
% \usepackage{chemfig}
% \usepackage[version=3]{mhchem}
\usepackage{mdframed}
\usepackage{booktabs}
\usepackage{xcolor}
\usepackage{listings}

\usepackage[cache, langlinenos]{minted}
\setminted{style=friendly, fontsize=\footnotesize, linenos}

\BeforeBeginEnvironment{minted}{\begin{mdframed}}
\AfterEndEnvironment{minted}{\end{mdframed}}

% On Overleaf, these lines give you sharper preview images.
% You might want to `comment them out before you export, though.
\usepackage{pgfpages}
\pgfpagesuselayout{resize to}[%
  physical paper width=8in, physical paper height=6in]

  % Here's where the presentation starts, with the info for the title slide
\title[Introduction to dotfiles]{Introduction to dotfiles}
\subtitle[And some tips]{And some tips}
\author{chanfr\_v - delaho\_h - sidore\_m}
\date{\today}
\subject{Vim, i3 \& Xresources}


\begin{document}

\frame{\maketitle}

% These three lines create an automatically generated table of contents.
\begin{frame}{Outline}
  \tableofcontents
\end{frame}

% Intro
\section*{Introduction}
\begin{frame}{Introduction}
  Hi!
\end{frame}


\begin{frame}{Introduction}
  \begin{itemize}
    \item On the PIE dotfiles are symlinks from \mintinline{bash}{afs/.confs/}
    \begin{exampleblock}{Example}
      \mintinline{bash}{.vimrc} is located at \mintinline{bash}{afs/.confs/vimrc}
      \end{exampleblock}
    \item These dotfiles are copied in \mintinline{bash}{~/} thanks to \mintinline{bash}{afs/.confs/install.sh}, which you must fill
    \item Be careful, dotfiles not copied in \mintinline{bash}{afs/.confs/} will be removed at exit!
  \end{itemize}
\end{frame}

% Xresources
\section{Xresources}
\subsection*{What is X11?}
\begin{frame}{X Window System (X11)}
\begin{itemize}
  \item The X Window System (X11) is a windowing system for bitmap displays, common on UNIX-like computer operating systems.
  \item i3 is designed for X11.
  \item To load i3 you have the choice:
    \begin{itemize}
      \item Boot on tty*, then execute \mintinline{bash}{~/.xinitrc} with startx.
      \item Display Manager.
    \end{itemize}
\end{itemize}
\end{frame}

\subsection*{Dotfile}
\begin{frame}{Xresources}
\begin{itemize}
  \item Where you set your colours, your font, and more.
  \item Location: \mintinline{bash}{~/.Xresources}
  \begin{block}{Naming}
    Xresources is just a naming convention, you can rename it according to your fantasies, then you will have to run:\\\mintinline{bash}{42sh$ xrdb dotfile}
  \end{block}
\end{itemize}
\end{frame}

\subsection*{Useful links}
\begin{frame}{Useful links}
Links
\begin{itemize}
  \item \href{https://wiki.archlinux.org/index.php/X_resources}{Arch wiki}
  \item \href{https://github.com/ryanoasis/nerd-fonts}{Nerd fonts}: Gives an indecent amount of glyphs
\end{itemize}
Man pages
\begin{itemize}
  \item X(1)
  \item xrdb(1)
  \item xset(1)
\end{itemize}
\end{frame}


\section{i3}
\subsection*{i3 Window Manager}
\begin{frame}{i3 Window Manager}
  \begin{itemize}
    \item What is a window manager?
      \begin{itemize}
        \item A graphical interface for the user.
        \item Controls the placement and appearance of windows.
        \item Might result in a desktop environment.
      \end{itemize}
    \item What about i3?
      \begin{itemize}
        \item Native, i3 is among the most ugly of them.
        \item Light, highly customisable, he has a great potential.
      \end{itemize}
  \end{itemize}
  Now, let's have a look at the dotfile.
\end{frame}

\subsection*{Config file}
\begin{frame}{.config/i3/config}
  \begin{itemize}
  \item Where i3 configuration (fonts, borders\dots) is set
  \item Location of all the useful shortcuts, learn them!
  \begin{exampleblock}{Example}
    Try \mintinline{bash}{$mod + R} to start the resize mode, then resize your window with \mintinline{bash}{$mod + arrows}
  \end{exampleblock}
  \item Useful place to start daemons with \mintinline{bash}{exec --no-startup-id}
  \end{itemize}
\end{frame}

\begin{frame}{Some recommendations (not for the PIE)}
  \begin{itemize}
    \item \href{https://wiki.archlinux.org/index.php/Redshift}{redshift}: Schedule a screen redshift to rest your eyes
    \item \href{https://wiki.archlinux.org/index.php/Activating_Numlock_on_Bootup}{numlockx}: Activate numlock on bootup
    \item \href{https://aur.archlinux.org/mons.git}{mons}: Automatic monitors
    \item xautolock: Automatic lock screen
    \item \href{https://wiki.archlinux.org/index.php/Udisks}{udiskie}: Automount USB devices
  \end{itemize}
\end{frame}

\subsection*{i3 bar}
\begin{frame}{i3 bar}
  \begin{itemize}
    \item Configured in \mintinline{bash}{~/.config/i3/config}
    \item Change the content and the bar behaviour
      \begin{block}{Polybar}
        Polybar is a github project which replaces i3 bar. More customizable, allows click effects\dots Have a look!
      \end{block}
  \end{itemize}
\end{frame}

\subsection*{Useful links}
\begin{frame}{Useful links}
  \begin{itemize}
    \item The \href{https://i3wm.org/docs/userguide.html}{i3 reference manual}
    \item \href{https://github.com/jaagr/polybar}{Polybar}
  \end{itemize}
\end{frame}

\section{Colorscheme}
\subsection*{Base16}
\begin{frame}{What is base 16?}

  \enquote{An architecture for building themes [\dots] using a base of 16 colors}

Templates are available for a bunch of IDE and programs, among them:

  \small
  \begin{itemize}
    \item i3
    \item Shell
    \item Xresources
    \item Vim
    \item Xcode
    \item Jetbrains (Rider, CLion, Pycharm\dots)
  \end{itemize}
  \normalsize

\end{frame}

\begin{frame}[fragile]{How to get/use Base 16?}

  First, install a builder (Many are available)

  Then download and build the colorschemes
  \begin{minted}{bash}
    pip3 install pybase16-builder
    mkdir -p $HOME/.dotfiles/base16 && cd $HOME/.dotfiles/base16
    pybase16 update && pybase16 build
  \end{minted}

  \vspace{1cm}
  Now all the color schemes are downloaded

  Read their README to know how to apply them


\end{frame}
\begin{frame}[fragile]{Base16 Shell}
  For instance, to get base16 in your shells, in your \mintinline{bash}{.bashrc/.zshrc}:
  \begin{minted}{bash}
    BASE16_SHELL=$HOME/.dotfiles/base16/templates/shell/
    [ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] &&\
      eval "$($BASE16_SHELL/profile_helper.sh)"
  \end{minted}
\end{frame}


\section{Vim}
\begin{frame}{Vim}

  \begin{itemize}
    \item Written by Bram Moolenaar in C and Vim script
    \item Vi-IMproved, is a text editor program based on Vi.
    \item Released in 1991
    \item Free and OpenSource \& GNU General Public License
    \item One of the most popular text editor on Linux
  \end{itemize}

\end{frame}
\subsection*{vimrc}
\begin{frame}{.vimrc}
  The \mintinline{bash}{.vimrc} file is the main configuration file for vim
  \begin{itemize}
    \item Use vim script language
    \item YOU will learn how to fill it up
    \item This configuration file is used for:
      \begin{itemize}
        \item ui
        \item colors
        \item indentation
        \item tabulation behaviour
        \item plugins
        \item any vim script command
        \item and much more\dots
      \end{itemize}
  \end{itemize}
\end{frame}


\begin{frame}{.vimrc}
  \begin{block}{Vimscript Syntax}
    \begin{itemize}
      \item Most of the \textbf{options} are \textit{setted} by the token \textbf{set}.
      \item A single \textbf{"} are used to mark comments.
      \item We recommend writing a single configuration modification per line. And to set up parts of your vimrc configuration. As it could expand to hundred of lines.
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}{.vimrc}
  \begin{block}{How to modify vim resources}
    \begin{itemize}
      \item Directly in vim, in the command bar.\\
      \item \textbf{:vimscript}\\
      \item Like :
             \begin{itemize}
              \item \textbf{:set number}
              \item \textbf{:syntax enable}
            \end{itemize}
          \item By writting vimscript in \mintinline{bash}{~/.vimrc} or \mintinline{bash}{/etc/vimrc} or \mintinline{bash}{/etc/vim/vimrc}. But without the \textbf{:} of course.
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}[fragile]{UI Basic Settings}
\begin{minted}{vim}
" Basic UI Config

set number        " set line numbers
set nu            " same

set showcmd       " show command in bottom bar
set ruler         " show cursor positon
set cursorline    " highlight current line
set wildmenu      " show all autocomplete of the vim commands
set showmatch     " highlight brackets, parenthesis.
\end{minted}
\end{frame}

\begin{frame}[fragile]{Tabs \& Spaces Basic Settings}
\begin{minted}{vim}
" Basic tabs \& space config

set tabstop=2     " set numbers of spaces per TAB
set softabstop=2  " set number of spaces in tab when editing
set shiftwidth=2  " set tab to 2 spaces
set expandtab     " convert tabs to spaces
\end{minted}
\end{frame}

\begin{frame}[fragile]{Indentation Basic Settings}
\begin{minted}{vim}
" Basic indent options

set autoindent  " copy indentation of the previous line
set ai          " same

set smartindent " more levels of indentation, nice on C files
set si          " same

set cindent     " C indentation, strict but customizable

" enable file type detection and associate its good indentation
filetype plugin indent on
\end{minted}
\end{frame}

\begin{frame}[fragile]{More Simple \& Cool Stuff}
\begin{minted}{vim}
" More Vim options \& protips

set list         " by default, replace '\n' with visible '$'

set background=dark

set colorcolumn=80 " colorized the 80 column with a color
" the color is set by the colorscheme, or red by default

set spell   " check for English spelling

colorscheme your-favorite-colorscheme
" override vim default colors with custom colors

" Setting keymaps
map <KEY> :vimscript<CR>

" optimize vim output, to keep some static elements unchanged
set lazydraw
\end{minted}
\end{frame}

\subsection*{Survival Vim for Exams: the SVE}
\begin{frame}[fragile]{Survival Vim for Exams}
  \begin{minted}{vim}
" Survival VIM for Exams

set number
set expandtab
set softtabstop=2
set shiftwidth=2
syntax enable
set list
set listchars=trail:@
set autoindent
set smartindent
set colorcolumn=80
  \end{minted}
\end{frame}

%\subsection*{autocmd}
%\begin{frame}[fragile]{autocmd}
%  \begin{block}{autocmd}
%  This feature of vim allow you to automate execution of vimscripts.
%    \begin{minted}{vim}
%" Example of use of autocmd
%autocmd bufnewfile *.example source /path/to/a/txt/file
%" autocmd with bufnewfile keyword will execute the content of source
%" at the creation of a new file, matching the globing '*.example'
%    \end{minted}
%  \end{block}
%  \begin{block}{file.txt}
%\begin{minted}{vim}
%:insert
%The content of this file will be written each time, you
%create a new file with vim.
%Typing the command:
%42sh$ vim file.example
%or
%42sh$ vim xx.example
%This is what the `insert' command do, it is quite useful.
%\end{minted}
%  \end{block}
%\end{frame}

%\subsection*{highlight \& match}
%\begin{frame}
%  \begin{block}{higlight}
%    This vimscript keyword allow setting a \textit{color}, fore and back ground.
%  \end{block}
%  \begin{block}{match}
%    This vimscript keyword allow setting a \textbf{highlight} value on a RegExp.
%    This will highlight the regex pattern in every file.
%  \end{block}
%  \begin{block}{Matching wrong coding style}
%    \begin{minted}{vim}
%    highlight WRONGCODINGSTYLE ctermbg=red ctermfg=white
%      match WRONGCODINGSTYLE /\\ if\(\\                   " will match if
%    \end{minted}
%  \end{block}
%\end{frame}

\subsection*{Vim Plugins}

\begin{frame}{Plugins}

  Multiple Package managers available:
  \begin{itemize}
    \item Vundle
    \item Pathogen
    \item vim-plug
    \item neobundle
  \end{itemize}

  Today we are going to present Vundle

\end{frame}

\begin{frame}[fragile]{Vundle}

  Simply run \mintinline{bash}{git clone http://github.com/VundleVim/Vundle.vim ~/.vim/bundle/Vundle.vim}

  In your vimrc:
  \begin{minted}{vim}
    set nocompatible              " be iMproved, required
    filetype off                  " required

    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    Plugin 'VundleVim/Vundle.vim'   " Plugin Manager

    call vundle#end()            " required
    filetype plugin indent on    " required
  \end{minted}

\end{frame}

\begin{frame}[fragile]{Plugin}

  Now you are able to install plugins, simply add them to your \mintinline{bash}{.vimrc}
  \begin{minted}{vim}
    set nocompatible              " be iMproved, required
    filetype off                  " required

    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'     " Plugin Manager
    Plugin 'vim-airline/vim-airline'  " Statusbar
    Plugin 'vim-syntastic/syntastic'  " Syntax Checking
    Plugin 'chriskempson/base16'      " Base16 Colorscheme
    if filereadable(expand("~/.vimrc_background"))
      let base16colorspace=256
      source ~/.vimrc_background
    endif
    let g:syntastic_c_compiler_options= \
      '-Wall -Werror -Wextra -pedantic -std=c99'
    call vundle#end()            " required
    filetype plugin indent on    " required
  \end{minted}


\end{frame}


\section*{Recap}
\begin{frame}{Recap}
Our githubs (contains the dotfiles)
\begin{itemize}
  \item \href{https://github.com/chanfrv/dotfiles}{chanfrv/dotfiles}
  \item \href{https://github.com/hugodelahousse/dotfiles}{hugodelahousse/dotfiles}
  \item \href{https://github.com/SidoShiro/dotfiles}{SidoShiro/dotfiles}
\end{itemize}
\end{frame}

\section*{Questions}
\begin{frame}{Questions}
  Questions?
\end{frame}

\end{document}
